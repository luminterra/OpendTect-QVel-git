uiQVelWellMarkerTools::uiQVelWellMarkerTools( uiParent* p, BufferStringSet selectedHorizons, BufferStringSet selectedMarkers, BufferStringSet associatedMarkers )
    : uiDialog( p, Setup( "Well-Marker Selection",
    "Specify Well to Marker association for QVel model",
    "qvel:105.0.3") )

{
    //selectedHorizonnms_.add((const BufferStringSet&) selectedHorizons, false);
    //selectedMarkernms_.add((const BufferStringSet&)selectedMarkers, false);
   // associatedMarkers_.add((const BufferStringSet&)associatedMarkers,true);

    hzmark_ = NULL;

    llbw = new uiLabeledListBox( this, "Available Horizons", false, uiLabeledListBox::AboveMid );
    horizonslist_ = llbw->box();
    horizonslist_->selectionChanged.notify( 
	    			mCB(this,uiQVelWellMarkerTools,hznchg) );

    //uiLabel * lab  = new uiLabel(this,"<--Associated-->");
    //lab->attach(ensureRightOf,llbw);

    llbw2 = new uiLabeledListBox(this,"Associated Markers",false,uiLabeledListBox::AboveMid);
    assoclist_ = llbw2->box();
    llbw2->attach(ensureRightOf,llbw);
    assoclist_->setAllowDuplicates(true);

        // select wells
    /*
    assocbut_ = new uiPushButton( this, "Associate", true );
    assocbut_->activated.notify( mCB(this,uiQVelWellMarkerTools,assocButPush) );
    assocbut_->attach(ensureRightOf, llbw2);
    assocbut_->setToolTip("Select wells to be used for markers and/or T/D curves.");
    


    llbw3 = new uiLabeledListBox( this, "Available Markers", true ,uiLabeledListBox::AboveMid);  
    markerslist_ = llbw3->box();
    llbw3->attach(ensureRightOf,llbw2);
    */
#if 1
     horizonslist_->setEmpty();
    
 //   markerslist_->setEmpty();
    
     assoclist_->setEmpty();

    for (int i = 0; i < selectedHorizons.size(); i++)
	horizonslist_->addItem(selectedHorizons[i]->str(),false,i);
    //for (int i = 0; i < selectedMarkers.size(); i++)
	//markerslist_->addItem(selectedMarkers[i]->str());
    for (int i = 0; i < associatedMarkers.size(); i++)
	assoclist_->addItem(associatedMarkers[i]->str(),false,i);

        horizonslist_->selectionChanged.notify( 
	    			mCB(this,uiQVelWellMarkerTools,hznchg) );
	assoclist_->selectionChanged.notify( 
	   			mCB(this,uiQVelWellMarkerTools,mrkchg) );

	horizonslist_->setPrefHeightInChar(associatedMarkers.size());
	assoclist_->setPrefHeightInChar(associatedMarkers.size());
#endif
 
    finaliseDone.notify( mCB(this,uiQVelWellMarkerTools,initWin) );

}

uiQVelWellMarkerTools::~uiQVelWellMarkerTools()
{
}

#define mErrRet(s) { uiMSG().error(s); return false; }

bool uiQVelWellMarkerTools::acceptOK( CallBacker* )
{

    return true;
}
void uiQVelWellMarkerTools::initWin( CallBacker *)
{
    uiMSG().message("For all horizons,\nselect a horizon, then choose a marker to (dis)associate.");
}

void	uiQVelWellMarkerTools::assocButPush(CallBacker*)
{
}
void uiQVelWellMarkerTools::hznchg( CallBacker* )
{
    TypeSet<int> ahzn;
    ahzn.erase();
    horizonslist_->getSelectedItems(ahzn);
    if (ahzn.size()<=0) return;
    hselect_ = ahzn.first();
    //horizonslist_->setItemCheckable(ahzn.first(),true);
    //horizonslist_->setItemChecked(ahzn.first(),true);
    
}
void uiQVelWellMarkerTools::mrkchg( CallBacker* )
{
       TypeSet<int> ahzn;
    ahzn.erase();
    horizonslist_->getSelectedItems(ahzn);
    if (ahzn.size()<=0)
    {
     //uiMSG().warning("First select a horizon, then choose a marker to (dis)associate.");
     assoclist_->clearSelection();
     return;
    }
    int ihzn = ahzn.first();
    TypeSet<int> amrk;
    amrk.erase();
    assoclist_->getSelectedItems(amrk);
    if (amrk.size()<=0) return;
    int imark=amrk.first();
    //markerslist_->setItemCheckable(amrk.first(),true);
    //markerslist_->setItemChecked(amrk.first(),true);
    

    
    char * mrk ="";
   
    for(int i = 0; i < assoclist_->size(); i++) {
	
	if (i == imark) {
	    mrk= strdup(assoclist_->textOfItem(i));
//	    fprintf(tracef,"set mrk string to %s\n",mrk);
	}
    }

    const char * prevt = assoclist_->textOfItem(ihzn);
   
//    fflush(tracef);
    if (!strcmp(prevt,mrk)) 
    {
	assoclist_->setItemText(ihzn,"");
	if (prevt && strlen(prevt) > 0)
	assoclist_->addItem(prevt);
    }
    else
    {
    assoclist_->setItemText(imark,"");
    assoclist_->setItemText(ihzn,mrk);
    if (prevt && strlen(prevt) > 0)
    assoclist_->addItem(prevt);
    }
    //horizonslist_->setAllItemsChecked(false);
    horizonslist_->clearSelection();
    //markerslist_->setAllItemsChecked(false);
    assoclist_->clearSelection();
    assoclist_->scrollToTop();
 
}
QVel::HorizonMarkersList * uiQVelWellMarkerTools::gethzmark(int & nentries)
{
    nentries = horizonslist_->size();
    if (hzmark_) delete[] hzmark_;
    hzmark_ = new QVel::HorizonMarkersList[nentries];
    for (int i = 0; i < nentries; i++)
    {
	hzmark_[i].horizons = horizonslist_->textOfItem(i);
	hzmark_[i].assocMarkers =  assoclist_->textOfItem(i);
    }
    return hzmark_;
}

#endif
